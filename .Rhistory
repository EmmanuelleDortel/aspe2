mef_ajouter_lots() %>%
mef_ajouter_mei() %>%
mef_convertir_en_taille_totale()
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete() %>%
filter(annee %in% 2010:2015) %>%
mef_ajouter_lots() %>%
mef_ajouter_taille_min_max() %>%
mef_estimer_poids_taille_min_max() %>%
mef_convertir_en_taille_totale(var_tai = c(lop_longueur_specimens_taille_mini,
lop_longueur_specimens_taille_maxi))
help("mef_reconstituer_effectif_par_taille")
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete() %>%
filter(annee %in% 2010:2015) %>%
mef_ajouter_lots() %>%
mef_reconstituer_effectif_par_taille()
help("mef_reconstituer_effectif_par_stade")
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete() %>%
filter(annee %in% 2010:2015) %>%
mef_ajouter_lots() %>%
mef_reconstituer_effectif_par_taille() %>%
mef_reconstituer_effectif_par_stade()
help("mef_reconstituer_capture_par_taille")
help("mef_reconstituer_effectif_par_taille")
help("mef_reconstituer_capture_par_taille")
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete() %>%
filter(annee %in% 2010:2015) %>%
mef_ajouter_lots() %>%
mef_reconstituer_capture_par_taille()
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete() %>%
filter(annee %in% 2010:2015) %>%
mef_ajouter_lots() %>%
mef_ajouter_poids() %>%
mef_reconstituer_capture_par_taille()
help("mef_reconstituer_capture_par_stade")
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete() %>%
filter(annee %in% 2010:2015) %>%
mef_ajouter_lots() %>%
mef_ajouter_poids() %>%
mef_reconstituer_capture_par_taille() %>%
mef_reconstituer_capture_par_stade()
library(help=aspe2)
library(help=aspe)
help(data_taxa)
head(data_taxa)
library(aspe)
library(aspe2)
help("mef_completer_poids")
help("mef_reconstituer_effectif_par_taille")
help("mef_reconstituer_capture_par_taille")
help("mef_reconstituer_capture_par_stade")
################################################################################
## Importation de la base ASPE
################################################################################
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/processed_data/tables_sauf_mei_2024_02_22_19_24_31.RData")
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/processed_data/mei_2024_02_22_19_24_31.RData")
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete()
library(aspe)
library(aspe2)
################################################################################
## Importation de la base ASPE
################################################################################
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/processed_data/tables_sauf_mei_2024_02_22_19_24_31.RData")
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/processed_data/mei_2024_02_22_19_24_31.RData")
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete()
library(magrittr)
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete()
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete() %>%
filter(annee %in% 2010:2015) %>%
# ajout du mois et de la saison des opérations et sélection des pêche de printemps et d'automne
mef_ajouter_ope_saison()
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete() %>%
filter(annee %in% 2010:2015)
################################################################################
don <- mef_creer_passerelle() %>%
# ajout de la date et de l'année des opérations et sélection de la période d'étude
mef_ajouter_ope_date_complete()
head(don)
don$annee
don[don$annee %in% 2010:2015,]
don <- don[don$annee %in% 2010:2015,]
don <- don[don$annee %in% 2010:2015,] %>%
mef_ajouter_ope_saison()
head(don)
mef_ajouter_ope_saison
don <- don[don$annee %in% 2010:2015,] %>%
mef_ajouter_ope_saison() %>%
mef_ajouter_poids()
head(don)
don <- don[don$annee %in% 2010:2015,] %>%
mef_ajouter_ope_saison() %>%
mef_ajouter_poids() %>%
filter(!is.na(saison))
head(don)
don <- don[don$annee %in% 2010:2015,] %>%
mef_ajouter_ope_saison() %>%
mef_ajouter_poids() %>%
mef_ajouter_surf_calc()
don <- don[don$annee %in% 2010:2015,] %>%
mef_ajouter_ope_saison() %>%
mef_ajouter_poids() %>%
mef_ajouter_surf_calc() %>%
mef_ajouter_type_protocole()
don <- don[don$annee %in% 2010:2015,] %>%
mef_ajouter_ope_saison() %>%
mef_ajouter_poids() %>%
mef_ajouter_surf_calc() %>%
mef_ajouter_type_protocole() %>%
mef_ajouter_passage() %>%
mutate(pas_numero = ifelse(is.na(pas_numero), 1, pas_numero)) %>%
mef_ajouter_mei()
don <- don[don$annee %in% 2010:2015,] %>%
mef_ajouter_ope_saison() %>%
mef_ajouter_poids() %>%
mef_ajouter_surf_calc() %>%
mef_ajouter_type_protocole() %>%
mef_ajouter_passage() %>%
mef_ajouter_mei()
# Conservation d'une opération de pêche par points de prélèvement et par an
don_ope <- mef_filtrer_operation(don,
var_id = pop_id,
var_tmp = annee,
var_surf = ope_surface_calculee,
var_pro = pro_libelle,
var_pds = lop_poids,
var_mei = mei_id,
var_pas = pas_numero,
var_date = mois,
default = TRUE)
################################################################################
## Sélection des points de prélèvements
################################################################################
# Estimation du nombre d'observations et de valeurs manquantes consécutives par pop_id et combinaisons de protocols de pêche
def_pop <- def_compter_obs(don_ope, var_id = pop_id, var_tmp = annee, var_pro = pro_libelle)
d1 <- mef_filtrer_obs(don_ope, def_pop, var_id = pop_id, var_pro = pro_libelle,
min_obs = 2, max_na_cons = 1, max_pro = 1, max_chg = 0)
d2 <- mef_filtrer_obs(don_ope, def_pop, var_id = pop_id,
min_obs = 2, max_na_cons = 1)
def_pop <- def_compter_obs(don_ope, var_id = pop_id, var_tmp = annee)
d3 <- mef_filtrer_obs(don_ope, def_pop, var_id = pop_id,
min_obs = 2, max_na_cons = 1)
# Regroupement des points sélectionnés et ajout des coordonnées géographique
don_pop <- d1 %>%
mef_ajouter_coords_wgs84(var_id = pop_id)
# Regroupement des points sélectionnés et ajout des coordonnées géographique
don_pop <- d3 %>%
mef_ajouter_coords_wgs84(var_id = pop_id)
don_pop <- select(don_pop, -X, -Y) %>%
mef_ajouter_coords(var_id = pop_id) %>%
mef_ajouter_coords(var_id = sta_id)
don_pop <- d3 %>%
mef_ajouter_coords(var_id = pop_id) %>%
mef_ajouter_coords(var_id = sta_id)
# Regroupement des points sélectionnés et ajout des coordonnées géographique
don_pop <- d3 %>%
mef_ajouter_coords_wgs84(var_id = pop_id)
don_cap <- don_pop %>%
# ajouter les codes des espèces et les effectifs des prélèvements élémentaires
mef_ajouter_lots() %>%
# ajouter le code idp des espèces
mef_ajouter_esp_idp()
################################################################################
## Préparation du jeu de données - effectifs de l'ensemble de la population
################################################################################
don_cap <- don_pop %>%
# ajouter les codes des espèces et les effectifs des prélèvements élémentaires
mef_ajouter_lots() %>%
# ajouter le code idp des espèces
mef_ajouter_esp_idp() %>%
summarise(effectif = sum(lop_effectif), .by = c(pop_id,annee,ope_id,pas_numero,esp_code_idp)) %>%
mef_ajouter_absence(var_id = pop_id,
var_taxon = esp_code_idp,
var_abs = effectif,
var_obs= c(ope_id,pas_numero)) %>%
filter(!is.na(esp_code_idp)) %>%
mef_ajouter_na(var_id = pop_id,
var_taxon = esp_code_idp,
var_obs = annee) %>%
mef_ajouter_trait(var_taxon = esp_code_idp) %>%
mef_ajouter_trait(var_taxon = esp_code_idp, trait = c("esp_nom_idp")) %>%
mef_ajouter_coords_wgs84(var_id = pop_id) %>%
mef_filtrer_distribution_native(var_taxon = esp_code_idp)
################################################################################
## Préparation du jeu de données - effectifs de l'ensemble de la population
################################################################################
don_cap <- don_pop %>%
# ajouter les codes des espèces et les effectifs des prélèvements élémentaires
mef_ajouter_lots() %>%
# ajouter le code idp des espèces
mef_ajouter_esp_idp()
head(don_cap)
help(aggregate)
don <- aggregate(don_cap$lop_effectif, list("pop_id"=don_cap$pop_id, "annee"=don_cap$annee, "ope_id"=don_cap$ope_id, "esp_code_idp"=don_cap$esp_code_idp), sum)
head(don)
don <- mef_ajouter_absence(var_id = pop_id,
var_taxon = esp_code_idp,
var_abs = x,
var_obs= c(ope_id,annee))
don <- mef_ajouter_absence(don, var_id = pop_id,
var_taxon = esp_code_idp,
var_abs = x,
var_obs= c(ope_id,annee))
summary(don)
library(aspe)
library(aspe2)
################################################################################
## Importation de la base ASPE
################################################################################
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/processed_data/tables_sauf_mei_2024_02_22_19_24_31.RData")
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/processed_data/mei_2024_02_22_19_24_31.RData")
################################################################################
## Sélection des opérations de pêche
################################################################################
don <- mef_creer_passerelle()
don <- mef_ajouter_ope_date_complete(don)
don <- don[don$annee %in% 2010:2015,]
don <- mef_ajouter_ope_saison(don)
don <- mef_ajouter_poids(don)
don <- mef_ajouter_surf_calc(don)
don <- mef_ajouter_type_protocole(don)
don <- mef_ajouter_passage(don)
don <- mef_ajouter_mei(don)
# Conservation d'une opération de pêche par points de prélèvement et par an
don_ope <- mef_filtrer_operation(don,
var_id = pop_id,
var_tmp = annee,
var_surf = ope_surface_calculee,
var_pro = pro_libelle,
var_pds = lop_poids,
var_mei = mei_id,
var_pas = pas_numero,
var_date = mois,
default = TRUE)
def_pop <- def_compter_obs(don_ope, var_id = pop_id, var_tmp = annee)
# Conservation d'une opération de pêche par points de prélèvement et par an
don_ope <- mef_filtrer_operation(don,
var_id = pop_id,
var_tmp = annee,
var_surf = ope_surface_calculee,
var_pro = pro_libelle,
var_pds = lop_poids,
var_mei = mei_id,
var_pas = pas_numero,
var_date = mois,
default = TRUE)
def_pop <- def_compter_obs(don_ope, var_id = pop_id, var_tmp = annee)
d3 <- mef_filtrer_obs(don_ope, def_pop, var_id = pop_id,
min_obs = 2, max_na_cons = 1)
# Regroupement des points sélectionnés et ajout des coordonnées géographique
don_pop <- mef_ajouter_coords(d3, var_id = pop_id)
don_pop <- mef_ajouter_coords_wgs84(d3, var_id = pop_id)
################################################################################
## Préparation du jeu de données - effectifs de l'ensemble de la population
################################################################################
don_cap <- mef_ajouter_lots(don_pop)
don_cap <- mef_ajouter_esp_idp(don_cap)
don <- aggregate(don_cap$lop_effectif, list("pop_id"=don_cap$pop_id, "annee"=don_cap$annee, "ope_id"=don_cap$ope_id, "esp_code_idp"=don_cap$esp_code_idp), sum)
don <- mef_ajouter_absence(don, var_id = pop_id,
var_taxon = esp_code_idp,
var_abs = x,
var_obs= c(ope_id,annee))
summary(don)
don <- mef_ajouter_na(don, var_id = pop_id,
var_taxon = esp_code_idp,
var_obs = annee)
summary(don)
don <- mef_ajouter_trait(don, var_taxon = esp_code_idp)
don <- mef_ajouter_trait(don, var_taxon = esp_code_idp, trait = c("esp_nom_idp"))
head(don)
don <- mef_ajouter_coords_wgs84(don, var_id = pop_id)
don <-mef_filtrer_distribution_native(don, var_taxon = esp_code_idp)
library(sf)
don <-mef_filtrer_distribution_native(don, var_taxon = esp_code_idp)
help(st_intersects)
df <- don
var_taxon = "esp_code_idp"
var_taxon <- enquo(var_taxon)
library(rlang)
head(don)
don <-mef_filtrer_distribution_native(don, var_taxon = esp_code_idp)
library(dplyr)
don <-mef_filtrer_distribution_native(don, var_taxon = esp_code_idp)
library(tidyverse)
don <-mef_filtrer_distribution_native(don, var_taxon = esp_code_idp)
library(magrittr)
don <-mef_filtrer_distribution_native(don, var_taxon = esp_code_idp)
library(magrittr)
library(lubridate)
library(GFE)
library(sf)
library(rlang)
library(dplyr)
library(tidyverse)
head(don)
don <- mef_filtrer_distribution_native(don, var_taxon = esp_code_idp)
var_taxon <- enquo(var_taxon)
var_obs <- enquo(var_obs)
var_obs <- NULL
var_obs <- enquo(var_obs)
df <- don
#-----------------------------------------------------------------------------
vec_taxon <- pull(df, !!var_taxon)[pull(df, !!var_taxon) %in% pull(distribution_native, !!var_taxon)] %>% unique()
df <- df %>% mutate(XX = X, YY = Y) %>%
st_as_sf(coords = c("XX", "YY"), crs = 4326) %>%
st_transform(crs = 2154)
#-----------------------------------------------------------------------------
df_filtre <- do.call("rbind",lapply(vec_taxon, function(i) {
distrib <- filter_at(distribution_native, quo_name(var_taxon), all_vars(.%in% i))
df_i <- filter_at(df, quo_name(var_taxon), all_vars(.%in% i)) %>%
st_filter(distrib)
return(df_i)
})) %>% rbind(filter_at(df, quo_name(var_taxon), all_vars(!.%in% vec_taxon)))
i
i<-"ABL"
distrib <- filter_at(distribution_native, quo_name(var_taxon), all_vars(.%in% i))
df_i <- filter_at(df, quo_name(var_taxon), all_vars(.%in% i)) %>%
st_filter(distrib)
help(st_filter)
library(aspe)
library(magrittr)
library(lubridate)
library(GFE)
library(sf)
library(rlang)
library(dplyr)
library(tidyverse)
################################################################################
## Importation de la base ASPE
################################################################################
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/processed_data/tables_sauf_mei_2024_02_22_19_24_31.RData")
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/processed_data/mei_2024_02_22_19_24_31.RData")
load("C:/Users/DORTEL/Desktop/PACKAGE_ASPE/es_station.RData")
head(don_pop)
df <- don_pop
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/Donnee/don_cap_idp_2010_2023.RData")
head(don_cap)
head(don_cap_idp)
df <- don_cap_idp
var_taxon <- "esp_code_idp"
var_obs=NULL
var_taxon <- enquo(var_taxon)
var_obs <- enquo(var_obs)
#-----------------------------------------------------------------------------
vec_taxon <- pull(df, !!var_taxon)[pull(df, !!var_taxon) %in% pull(distribution_native, !!var_taxon)] %>% unique()
load("C:/Users/DORTEL/Desktop/PACKAGE_ASPE/Donnee_aspe/distribution_native.rda")
#-----------------------------------------------------------------------------
vec_taxon <- pull(df, !!var_taxon)[pull(df, !!var_taxon) %in% pull(distribution_native, !!var_taxon)] %>% unique()
df <- df %>% mutate(XX = X, YY = Y) %>%
st_as_sf(coords = c("XX", "YY"), crs = 4326) %>%
st_transform(crs = 2154)
head(df)
df <- df %>% mutate(XX = X, YY = Y)
head(df)
df <- df %>% mutate(XX = X, YY = Y) %>%
st_as_sf(coords = c("XX", "YY"), crs = 4326)
df <- don_cap_idp[!is.na(don_cap_idp$X),]
df <- df %>% mutate(XX = X, YY = Y) %>%
st_as_sf(coords = c("XX", "YY"), crs = 4326) %>%
st_transform(crs = 2154)
#-----------------------------------------------------------------------------
df_filtre <- do.call("rbind",lapply(vec_taxon, function(i) {
distrib <- filter_at(distribution_native, quo_name(var_taxon), all_vars(.%in% i))
df_i <- filter_at(df, quo_name(var_taxon), all_vars(.%in% i)) %>%
st_filter(distrib)
return(df_i)
})) %>% rbind(filter_at(df, quo_name(var_taxon), all_vars(!.%in% vec_taxon)))
df <- don_cap_idp[!is.na(don_cap_idp$X),]
library(aspe2)
#-----------------------------------------------------------------------------
vec_taxon <- pull(df, !!var_taxon)[pull(df, !!var_taxon) %in% pull(distribution_native, !!var_taxon)] %>% unique()
df <- df %>% mutate(XX = X, YY = Y) %>%
st_as_sf(coords = c("XX", "YY"), crs = 4326) %>%
st_transform(crs = 2154)
#-----------------------------------------------------------------------------
df_filtre <- do.call("rbind",lapply(vec_taxon, function(i) {
distrib <- filter_at(distribution_native, quo_name(var_taxon), all_vars(.%in% i))
df_i <- filter_at(df, quo_name(var_taxon), all_vars(.%in% i)) %>%
st_filter(distrib)
return(df_i)
})) %>% rbind(filter_at(df, quo_name(var_taxon), all_vars(!.%in% vec_taxon)))
df <- don_cap_idp[!is.na(don_cap_idp$X),]
don <- df
don <- mef_filtrer_distribution_native(don, var_taxon = esp_code_idp)
mef_filtrer_distribution_native()
mef_filtrer_distribution_native
df <- don_cap_idp[!is.na(don_cap_idp$X),]
don <- df
save(don, file="don.RData")
library(aspe)
library(aspe2)
################################################################################
## Importation de la base ASPE
################################################################################
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/processed_data/tables_sauf_mei_2024_02_22_19_24_31.RData")
load("C:/Users/DORTEL/Desktop/INDICATEUR POISSON/DONNEE_ASPE/processed_data/mei_2024_02_22_19_24_31.RData")
don <- mef_creer_passerelle()
don <- mef_ajouter_lots(don)
don <- mef_ajouter_ope_date_complete(don)
don <- don[don$annee %in% 2010:2015,]
don <- mef_estimer_poids_taille(don)
don <- mef_ajouter_taille_min_max(don)
don <- mef_estimer_poids_taille_min_max(don)
don <- mef_convertir_en_taille_totale(don, var_tai = c(lop_longueur_specimens_taille_mini,
lop_longueur_specimens_taille_maxi))
don <- mef_creer_passerelle()
don <- mef_ajouter_ope_date_complete(don)
don <- don[don$annee %in% 2010:2015,]
don <- mef_ajouter_lots(don)
don <- mef_reconstituer_effectif_par_taille(don)
don <- mef_reconstituer_effectif_par_stade(don)
don <- mef_creer_passerelle()
don <- mef_ajouter_ope_date_complete(don)
don <- don[don$annee %in% 2010:2015,]
don <- mef_ajouter_lots(don)
don <- mef_reconstituer_capture_par_taille(don)
help(mef_reconstituer_capture_par_taille)
don <- mef_creer_passerelle()
don <- mef_ajouter_ope_date_complete(don)
don <- don[don$annee %in% 2010:2015,]
don <- mef_ajouter_lots(don)
don <- mef_ajouter_poids(don)
don <- mef_reconstituer_capture_par_taille(don)
don <- mef_reconstituer_capture_par_stade(don)
getwd()
library(usethis)
library(devtools)
library(roxygen2)
library(desc)
library(tools)
chemin <- "C:/Users/DORTEL/Desktop/PACKAGE_ASPE/aspe2"
setwd(chemin)
#---------------------------------------------------------------------------------------------------------------------
## Inclure les données
load("C:/Users/DORTEL/Desktop/PACKAGE_ASPE/Donnee_aspe/data_taxa.rda")
load("C:/Users/DORTEL/Desktop/PACKAGE_ASPE/Donnee_aspe/distribution_native.rda")
usethis::use_data(data_taxa)
usethis::use_data(distribution_native)
resaveRdaFiles("data/distribution_native.rda", compress="xz")
#-------------------------------------------------------------------------------
## Création des fichiers d'aide et du Namespace
devtools::document()
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check()
desc_set(Title = "An R package to process and visualise the river fish data in France / Un package R pour traiter et visualiser les données sur les poissons de rivière en France")
desc_set(Version = "1.0")
desc_set_list("Author",c("Emmanuelle Dortel[cre,aut] <emmanuelle.dortel@gmail.com>","Pascal Irz[ctb] <pascal.irz@ofb.gouv.fr>","Nicolas Poulet[ctb] <nicolas.poulet@ofb.gouv.fr>"))
desc_set(Maintainer = "Emmanuelle Dortel <emmanuelle.dortel@gmail.com>")
desc_set(Description = "Provides additionnal tools to aspe package for ASPE database processing and includes functions to prepare datasets for estimates of population dynamics indicators. / Fournit des outils supplémentaires au package aspe pour le traitement de la base de données ASPE, comprend notamment des fonctions pour préparer les jeux de données pour les estimations des indicateurs de dynamique de population.")
desc_set(License = "GPL-3")
desc_set(Depends = "R (>= 4.2.0)")
desc_set(Language = "fr")
desc_set(LazyData = "TRUE")
desc_set(LazyDataCompression = "xz")
desc_set_list("Imports",c("dplyr","magrittr","GFE","lubridate","rlang","sf","stats","tidyr","tidyselect","utils"))
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check()
desc_set_list("Suggests","aspe")
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check()
#---------------------------------------------------------------------------------------------------------------------
## Verification du package
devtools::check()
devtools::check(document=FALSE)
devtools::check(document=FALSE)
devtools::check(document=FALSE)
devtools::check(document=FALSE)
devtools::check(document=FALSE)
devtools::check(document=FALSE)
devtools::check(document=FALSE)
devtools::check(document=FALSE)
desc_set_list("Suggests",c("aspe","popdynmodel"))
devtools::check(document=FALSE)
devtools::check(document=FALSE)
#---------------------------------------------------------------------------------------------------------------------
## Installation du package
devtools::install()
#---------------------------------------------------------------------------------------------------------------------
## Readme
usethis::use_readme_md()
#---------------------------------------------------------------------------------------------------------------------
## Readme
usethis::use_readme_md()
#---------------------------------------------------------------------------------------------------------------------
## Vignette
usethis::use_vignette("aspe2")
#---------------------------------------------------------------------------------------------------------------------
## Générer le fichier compressé
devtools::build()
